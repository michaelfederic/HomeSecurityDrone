#include <analogWrite.h>
#include <ESP32PWM.h>
#include <ArduinoJson.h>
//#include <AsyncTCP.h>
#include <WiFi.h>
#include <ESPAsyncWebServer.h>

int throttle = 0;
int yaw_reading = 0;
int pitch_reading = 0;
int roll_reading = 0;

const char* ssid = "HOME-40DA-2.4";
const char* password =  "borrow7903cheer";

//create AsyncWebServer object on port 80
AsyncWebServer server(80);
AsyncWebSocket ws("/ws");

//define the pin outputs
const int alphaPin = 12;
const int betaPin = 13;
const int gammaPin = 14;
const int throttlePin = 15;

//declare duty cycles for each channel
int dutyCycle1 = 0;
int dutyCycle2 = 0;
int dutyCycle3 = 0;
int dutyCycle4 = 0;

//define frequency for each channel
const int freq = 330;

//define 4 channels one per pin outputs
const int ledChannel1 = 1;
const int ledChannel2 = 2;
const int ledChannel3 = 3;
const int ledChannel4 = 4;

//define resolution (value range)
const int resolution = 12;

//sets up network
void setup(){
  Serial.begin(115200);
 
  WiFi.begin(ssid, password);
 
  while (WiFi.status() != WL_CONNECTED) {
    delay(1000);
    Serial.println("Connecting to WiFi..");
  }
 

 // Print ESP Local IP Address
  Serial.println(WiFi.localIP());

  //configure pins as outputs
  pinMode(alphaPin, OUTPUT);
  pinMode(betaPin, OUTPUT);
  pinMode(gammaPin, OUTPUT);
  pinMode(throttlePin, OUTPUT);

  //setup the channels functions
  ledcSetup(ledChannel1, freq, resolution);
  ledcSetup(ledChannel2, freq, resolution);
  ledcSetup(ledChannel3, freq, resolution);
  ledcSetup(ledChannel4, freq, resolution);

  //attah the pin to a specific channel
  ledcAttachPin(alphaPin, ledChannel1);
  ledcAttachPin(betaPin, ledChannel2);
  ledcAttachPin(gammaPin, ledChannel3);
  ledcAttachPin(throttlePin, ledChannel4);
  
  initWebSocket();
//begins server
  server.begin();
}

void handleWebSocketMessage(void *arg, uint8_t *data, size_t len) {
    AwsFrameInfo *info = (AwsFrameInfo*)arg;
    if (info->final && info->index == 0 && info->len == len && info->opcode == WS_TEXT) {

        StaticJsonDocument<96> doc;
        
        DeserializationError error = deserializeJson(doc, data, len);
        
        if (error) {
          Serial.print(F("deserializeJson() failed: "));
          Serial.println(error.f_str());
          return;
        }
        throttle = doc["throttle"];
        yaw_reading = doc["yaw"];
        pitch_reading = doc["pitch"];
        roll_reading = doc["roll"];
        

        if(doc["yaw"]){
          dutyCycle1 = map(yaw_reading, -110, 100, 950 , 2800);
          Serial.print("Yaw: ");
          Serial.print(yaw_reading);
          Serial.print("\t DutyCycle: ");
          Serial.println(dutyCycle1);
        }

        
        if(doc["pitch"]){
          dutyCycle2 = map(pitch_reading, -110, 100, 950 , 2800);
          Serial.print("Pitch: ");
          Serial.print(pitch_reading);
          Serial.print("\t DutyCycle: ");
          Serial.println(dutyCycle2);
        }
        
        
        if(doc["roll"]){
          dutyCycle3 = map(roll_reading, -110, 100, 950 , 2800);
          Serial.print("Roll: ");
          Serial.print(roll_reading);
          Serial.print("\t DutyCycle: ");
          Serial.println(dutyCycle3);
        }
        
        
        if(doc["throttle"]){
          dutyCycle4 = map(throttle, -110, 100, 950 , 2800);
          Serial.print("Throttle: ");
          Serial.print(throttle);
          Serial.print("\t DutyCycle: ");
          Serial.println(dutyCycle4);
        }
          
          //analogWriteResolution(8);
          
          
        //Serial.println("Data received: ");
        
//        if(doc["alpha"]){
//        Serial.print("Alpha: ");
//        Serial.println(alpha_reading);
//        Serial.print("Beta: ");
//        Serial.println(beta_reading);
//        Serial.print("Gamma: ");
//        Serial.println(gamma_reading);
//          }
//         if(doc["throttle"]){
//         Serial.print("throttle: ");
//         Serial.println(throttle);
//         
//         }
        

    }
}

void onEvent(AsyncWebSocket *server, AsyncWebSocketClient *client, AwsEventType type,
             void *arg, uint8_t *data, size_t len) {
  switch (type) {
    case WS_EVT_CONNECT:
      Serial.printf("WebSocket client #%u connected from %s\n", client->id(), client->remoteIP().toString().c_str());
      
      break;
    case WS_EVT_DISCONNECT:
      Serial.printf("WebSocket client #%u disconnected\n", client->id());
      break;
    case WS_EVT_DATA:
      handleWebSocketMessage(arg, data, len);
      
      break;
    case WS_EVT_PONG:
    case WS_EVT_ERROR:
      break;
  }
}

 void initWebSocket() {
  ws.onEvent(onEvent);
  server.addHandler(&ws);
}


void loop(){

  ledcWrite(ledChannel1, dutyCycle1);
  ledcWrite(ledChannel2, dutyCycle2);
  ledcWrite(ledChannel3, dutyCycle3);
  ledcWrite(ledChannel4, dutyCycle4);
  
  ws.cleanupClients();
  
  }
